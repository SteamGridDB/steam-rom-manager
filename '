<div class="upperMenu">
  Upper Menu
</div>
<div class="gamesList">
  <ng-container *ngFor="let steamDir of vdfData | keys">
    <div class="directory" *ngVar="{ isHidden: false } as directory" [class.hidden]="directory.isHidden">
      <div class="title" (click)="directory.isHidden = !directory.isHidden">
        <svg select-arrow-down></svg>
        <span>{{steamDir}}</span>
      </div>
      <ng-container *ngFor="let steamUser of vdfData[steamDir] | keys">
        <div class="user" *ngVar="{ isHidden: false } as user" [class.hidden]="user.isHidden">
          <div class="title" (click)="user.isHidden = !user.isHidden">
            <svg select-arrow-down></svg>
            <span>{{steamUser}}</span>
          </div>
          <div class="apps">
            <ng-container *ngFor="let shortcut of vdfData[steamDir][steamUser].shortcuts.fileData.shortcuts">
              <div class="app">
                <span>{{shortcut.appname}}</span>
              </div>
            </ng-container>
          </div>
        </div>
      </ng-container>
    </div>
  </ng-container>

  <!--  -->
  <!-- <div class="directory" *ngVar="{ isHidden: false } as directory" [class.hidden]="directory.isHidden"> -->
  <!--         <div class="title" (click)="directory.isHidden = !directory.isHidden"> -->
  <!--           <svg select-arrow-down></svg> -->
  <!--           <span>{{steamDir}}</span> -->
  <!--         </div> -->
  <!--         <ng-container *ngFor="let steamUser of previewData[steamDir] | keys"> -->
  <!--           <div class="user" *ngVar="{ isHidden: false } as user" [class.hidden]="user.isHidden"> -->
  <!--             <div class="title" (click)="user.isHidden = !user.isHidden"> -->
  <!--               <svg select-arrow-down></svg> -->
  <!--               <span>{{previewData[steamDir][steamUser].username}} ({{(previewData[steamDir][steamUser].apps | keys).length}} titles)</span> -->
  <!--             </div> -->
  <!--             <ng-container *ngIf="getImageType()=='games'"> -->
  <!--               <div class="apps"> -->
  <!--                 <ng-container *ngFor="let appId of sortedAppIds(previewData[steamDir][steamUser].apps)"> -->
  <!--                   <ng-container *ngVar="previewData[steamDir][steamUser].apps[appId] as app"> -->
  <!--                     <div class="title" *ngIf="isAppVisible(app)"> -->
  <!--                       <span [attr.title]="app.extractedTitle">{{app.title}}</span> -->
  <!--                     </div> -->
  <!--                     <ng-container *ngFor="let imagetype of ['long','tall','hero','logo','icon']"> -->
  <!--                       <ng-container *ngVar="getBackgroundImage(app, imagetype) as image"> -->
  <!--                         <ng-container *ngVar="getAppImages(app, imagetype) as appimages"> -->
  <!--                           <div class="app" *ngIf="(app.title | fuzzyTest: filterValue) && (app.steamCategories | intersectionTest: actualCategoryFilter) && ([app.configurationTitle] | intersectionTest: actualParserFilter)" [style.backgroundImage]="setBackgroundImage(app, image, imagetype) | cssUrl | safeStyle" -->
  <!--                                [class.retrieving]="getImagePool(appimages.imagePool, imagetype).retrieving" [class.noImages]="!getImagePool(appimages.imagePool, imagetype).retrieving && image == undefined" -->
  <!--                                [class.downloading]="image != undefined && image.loadStatus === 'downloading'" [class.failed]="image != undefined && image.loadStatus === 'failed'" -->
  <!--                                [class.imageLoaded]="image != undefined && image.loadStatus === 'done'" (mouseenter)="entries.hoverIndex = app.entryId; entries.hoverType = imagetype;" -->
  <!--                                [class.longStyle]="imagetype === 'long'" -->
  <!--                                [class.tallStyle]="imagetype === 'tall'" -->
  <!--                                [class.heroStyle]="imagetype === 'hero'" -->
  <!--                                [class.logoStyle]="imagetype === 'logo'" -->
  <!--                                [class.iconStyle]="imagetype === 'icon'" -->
  <!--                                [class.showExcludes]="showExcludes" -->
  <!--                                [class.isExcluded]="!!excludedAppIds[steamDir]&&!!excludedAppIds[steamDir][steamUser]&&!!excludedAppIds[steamDir][steamUser][appId]" -->
  <!--                                (mouseleave)="entries.hoverIndex = undefined; entries.hoverType = undefined;" -->
  <!--                                (click)="excludeAppId(steamDir, steamUser, appId)" -->
  <!--                                > -->
  <!--                                <div class="appOverlay" *ngIf="!this.scrollingEntries && entries.hoverIndex === app.entryId && entries.hoverType === imagetype"> -->
  <!--                                  <div class="appInfo"> -->
  <!--                                    <div class="title" text-scroll [attr.title]="app.extractedTitle"><span>{{app.title}}</span></div> -->
  <!--                                    <ng-container *ngIf="image != null"> -->
  <!--                                      <div class="provider" text-scroll> -->
  <!--                                        {{image.imageProvider + (image.imageUploader ? ' (' + lang.by + ' ' + image.imageUploader + ')' : '') + (image.imageRes ? '['+image.imageRes+']':'')  }} -->
  <!--                                      </div> -->
  <!--                                      <div class="imageIndex"> -->
  <!--                                        {{currentImageIndex(app, imagetype) + '/' + maxImageIndex(app, imagetype)}} -->
  <!--                                      </div> -->
  <!--                                    </ng-container> -->
  <!--                                  </div> -->
  <!--                                  <div class="imageSelector"> -->
  <!--                                    <ng-container *ngIf="areImagesAvailable(app, imagetype)"> -->
  <!--                                      <svg class="previous" (click)="previousImage(app, imagetype)" select-arrow-left hover="true" active="true"></svg> -->
  <!--                                      <svg class="next" (click)="nextImage(app, imagetype)" select-arrow-right hover="true" active="true"></svg> -->
  <!--                                    </ng-container> -->
  <!--                                  </div> -->
  <!--                                  <div class="bottomPanel"> -->
  <!--                                    <div text-scroll class="configTitle"> -->
  <!--                                      {{app.configurationTitle + (app.steamCategories.length > 0 ? ' (' + app.steamCategories.join(', ') + ')' : '')}} -->
  <!--                                    </div> -->
  <!--                                    <div class="appButtons"> -->
  <!--                                      <svg class="button" title="Fix match" image-lens hover="true" active="true" *ngIf="!showExcludes &&(!image || image.loadStatus === 'done')" (click)="changeAppDetails(app, steamDir, steamUser, appId)"></svg> -->
  <!--                                      <svg class="button" [title]="lang.addLocalImages" add-images hover="true" active="true" (click)="addLocalImages(app, imagetype)"></svg> -->
  <!--                                      <span class="separator"></span> -->
  <!--                                      <svg class="button" *ngIf="!getImagePool(appimages.imagePool, imagetype).retrieving" (click)="refreshImages(app, imagetype)" [title]="lang.refreshImages" refresh-images hover="true" active="true"></svg> -->
  <!--                                      <svg class="button" *ngIf="image != undefined && image.loadStatus === 'done'" (click)="saveImage(image,app.title)" [title]="lang.saveImage" save-image hover="true" active="true"></svg> -->
  <!--                                      <svg class="button" *ngIf="image != undefined && image.loadStatus === 'failed'" (click)="loadImage(app ,imagetype)" [title]="lang.retryDownload" image-alert hover="true" active="true"></svg> -->
  <!--                                    </div> -->
  <!--                                  </div> -->
  <!--                                </div> -->
  <!--                           </div> -->
  <!--                         </ng-container> -->
  <!--                       </ng-container> -->
  <!--                     </ng-container> -->
  <!--                   </ng-container> -->
  <!--                 </ng-container> -->
  <!--               </div> -->
  <!--             </ng-container> -->

  </div>
  <div class="details">
    Details (saves, controllerconfigs)
  </div>
  <div class="menu">
    <div class="buttonGroup">
      <div class="menuButton" (click)="refreshGames()">
        Refresh Games
      </div>
    </div>
  </div>

