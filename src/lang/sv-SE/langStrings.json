{
  "preview": {
    "component": {
      "filter": "Sök efter spel",
      "selectType": "Artwork Type",
      "selectCategories": "Steam Category",
      "selectParsers": "Parser Title",
      "selectTypeOptions": {
        "long": "Banners",
        "tall": "Posters",
        "hero": "Hjältar",
        "icon": "Ikoner",
        "logo": "Logotyper",
        "games": "All Artwork"
      },
      "by": "av",
      "refreshImages": "Refresh artwork",
      "saveImage": "Save artwork to file",
      "addLocalImages": "Add local artwork",
      "retryDownload": "Retry artwork download",
      "generateAppList": "Refresh",
      "saveAppList": "Save to Steam",
      "removeAppList": "Remove from Steam",
      "remainingImages": "Retrieving urls:",
      "stopUrlRetrieving": "Stop",
      "exportSelections": "Export art",
      "importSelections": "Import art",
      "backButton": "Tillbaka",
      "logButton": "Logg"
    },
    "service": {
      "info": {
        "listIsBeingGenerated": "List is being generated. Please wait.",
        "listIsBeingSaved": "List is being saved. Please wait.",
        "listIsBeingRemoved": "List is being removed. Please wait.",
        "listIsEmpty": "Listan är tom.",
        "populatingVDF_List": "Populating VDF list.",
        "creatingBackups": "Creating backups.",
        "readingVDF_Files": "Reading VDF files.",
        "mergingVDF_entries": "Merging VDF entries.",
        "removingVDF_entries": "Removing VDF entries and image files.",
        "savingCategories": "Saving category information to localconfig.vdf.",
        "savingControllers": "Saving controller information.",
        "removingFromCategories": "Removing all added category information",
        "writingVDF_entries__i": "Writing VDF files and downloading high res images in batches of ${batchSize}.",
        "updatingKnownSteamDirList": "Updating a list of known Steam directories.",
        "retryingDownload__i": "Retrying artwork download from \"${imageUrl}\" for \"${appTitle}\".",
        "disabledConfigurations__i": "${count} user parser(s) was/were skipped (disabled by user).",
        "invalidConfigurations__i": "${count} user parser(s) was/were skipped (invalid).",
        "executingParsers": "Executing parsers.",
        "shutdownSteam": "If Steam is running, exit Steam.",
        "noParserConfigurations": "Please create parser in \"Parsers\" menu first.",
        "parserFoundNoFiles": "Parser(s) found no files matching user configuration.",
        "allImagesRetrieved": "All available artwork urls retrieved.",
        "providerTimeout__i": "Timeout was requested by \"${provider}\" for ${time} second(s).",
        "noAccountsWarning": "User accounts not found. Incorrect Steam directory?",
        "preparingExport": "Preparing export of artwork choices.",
        "exportProgress__i": "Saving artwork choices ${progress}.",
        "readingSelections": "Applying imported artwork choices."
      },
      "errors": {
        "fatalError": "Fatal error occurred in Add Games. See event log for details.",
        "fatalError__i": "Fatal Add Games error: ${error}",
        "knownSteamDirListIsEmpty": "A list of known Steam directories is empty.",
        "steamIsRunning": "Cannot make changes while steam is running!",
        "categorySaveError": "Error updating categories. See event log for details.",
        "categorySaveError__i": "Category error (shortcuts and artwork will still be added): ${error}",
        "controllerSaveError": "Error updating controller templates. See event log for details.",
        "controllerSaveError__i": "Controller error (shortcuts and artwork will still be added): ${error}",
        "retryingDownload__i": "Artwork download from \"${imageUrl}\" failed for \"${appTitle}\".",
        "providerError__i": "Error received from \"${provider}\" for \"${title}\":\n (${url ? `${code}: ${url}` : code}).",
        "unknownProviderError__i": "Error received from \"${provider}\" for \"${title}\":\n ${error}",
        "exportError__i": "Could not save selections package folder: ${error}",
        "importJSONFailError__i": "Could not import selections, JSON was malformed: ${error}",
        "importFailError__i": "Could not import artwork choices: ${error}"
      },
      "success": {
        "writingVDF_entries": "Done adding/removing entries.",
        "removingVDF_entries": "Entries have been removed.",
        "exportSuccess__i": "Artwork choices folder successfully saved to \"${path}\"!",
        "importSelectionsSuccess__i": "Successfully imported ${count} artwork choices!"
      }
    }
  },
  "steamParser": {
    "onlyGamesTitle": "Find artwork for games only (no tools or demos)",
    "onlyInstalledTitle": "Find artwork for installed titles only",
    "sourceModsTitle": "Find artwork for unofficial source mods",
    "errors": {
      "directoryInvalid": "> Steam directory invalid.",
      "noSteamAccounts": "> Steam directory specified has no accounts.",
      "steamChanged__i": "> Steam changed internal database structure or parser tried to read an outdated database.\nProblematic file: ${file}\nFull error:\n ${error}",
      "fatalError__i": "> Steam parser failed with fatal error:\n ${error}"
    }
  },
  "nonSRMShortcutsParser": {
    "errors": {
      "noSteamAccounts": "> Steam directory specified has no accounts.",
      "fatalError__i": "> Non-SRM Shortcuts parser failed with fatal error:\n ${error}"
    }
  },
  "manualParser": {
    "manifestsInputTitle": "Manifests Directory",
    "manifestsInputPlaceholder": {
      "Windows_NT": "C:\\path\\to\\your\\manifests\\",
      "Darwin": "/path/to/your/manifests/",
      "Linux": "/path/to/your/manifests/"
    },
    "errors": {
      "fatalError__i": "> Manual parser failed with fatal error:\n ${error}"
    }
  },
  "epicParser": {
    "manifestsInputTitle": "Epic Manifests Directory Override",
    "manifestsInputPlaceholder": {
      "Windows_NT": "C:\\path\\to\\your\\manifests\\",
      "Darwin": "/path/to/your/manifests/",
      "Linux": "/path/to/your/manifests/"
    },
    "launcherModeInputTitle": "Launch games via Epic for online services",
    "errors": {
      "invalidManifestsOverride": "> Manifests Override is not a valid directory.",
      "epicNotCompatible": "> Epic Games Store not available on Linux.\n If you are using the Legendary store on Linux you need to set Manifests Override.",
      "epicNotInstalled": "> Epic Games does not appear to be installed.",
      "fatalError__i": "> Epic Games parser failed with fatal error:\n ${error}"
    }
  },
  "legendaryParser": {
    "launcherModeInputTitle": "Launch games via Legendary for online services",
    "legendaryInstalledFileTitle": "Legendary installed.json Path Override",
    "legendaryInstalledFilePlaceholder": {
      "Windows_NT": "C:\\path\\to\\legendary\\installed.json",
      "Darwin": "/path/to/legendary/installed.json",
      "Linux": "/path/to/legendary/installed.json"
    },
    "legendaryExeOverrideTitle": "Legendary Path Override",
    "legendaryExeOverridePlaceholder": {
      "Windows_NT": "C:\\path\\to\\legendary.exe",
      "Darwin": "/path/to/legendary",
      "Linux": "/path/to/legendary"
    },
    "errors": {
      "legendaryNotInstalled": "> Legendary installed.json not found",
      "fatalError__i": "> Legendary parser failed with fatal error:\n ${error}"
    }
  },
  "battleNetParser": {
    "battleExeOverrideTitle": "Battle.net.exe Path Override",
    "battleExeOverridePlaceholder": {
      "Windows_NT": "C:\\path\\to\\Battle.net\\Battle.net.exe",
      "Darwin": "/path/to/Battle.net.app/Contents/MacOS/Battle.net",
      "Linux": "/path/to/Battle.net"
    },
    "errors": {
      "battleNotCompatible": "> Battle.net parser is only available on Windows.",
      "fatalError__i": "> Battle.net parser failed with fatal error:\n ${error}"
    }
  },
  "UWPParser": {
    "UWPDirTitle": "XboxGames Directory Override",
    "UWPDirPlaceholder": {
      "Windows_NT": "C:\\path\\to\\XboxGames\\ or C:\\path\\to\\WindowsApps\\",
      "Darwin": "/path/to/XboxGames/ eller /path/to/WindowsApps/",
      "Linux": "/path/to/XboxGames/ eller /path/to/WindowsApps/"
    },
    "UWPLauncherModeTitle": "Launch game as UWP instead of launcher helper",
    "errors": {
      "fatalError__i": "> UWP parser is not compatible in this platform.",
      "UWPNotCompatible": "> UWP parser is only available on Windows."
    }
  },
  "uplayParser": {
    "uplayDirTitle": "Ubisoft Directory Override",
    "uplayDirPlaceholder": {
      "Windows_NT": "C:\\path\\to\\Ubisoft\\",
      "Darwin": "/path/to/Ubisoft/",
      "Linux": "/path/to/Ubisoft/"
    },
    "launcherModeInputTitle": "Launch games via UPlay for online services",
    "errors": {
      "invalidManifestsOverride": "> Uplay Directory Override is not a valid directory.",
      "uplayNotCompatible": "> UPlay Parser not available on Linux or Mac.",
      "uplayDirNotFound": "> Specified UPlay directory does not exist.",
      "uplayNotInstalled": "> UPlay not installed in specified directory.",
      "fatalError__i": "> UPlay parser failed with fatal error:\n ${error}"
    }
  },
  "gogParser": {
    "galaxyExeOverrideTitle": "Galaxy Path Override",
    "galaxyExeOverridePlaceholder": {
      "Windows_NT": "C:\\path\\to\\GalaxyClient.exe",
      "Darwin": "/path/to/GOG Galaxy.app/Contents/MacOS/GOG Galaxy",
      "Linux": "/path/to/GalaxyClient"
    },
    "launcherModeInputTitle": "Launch games via GOG Galaxy",
    "parseLinkedExecsTitle": "Parse linked executables from GOG Galaxy",
    "parseRegistryEntries": "Parse using Registry instead of Galaxy DB",
    "errors": {
      "invalidGalaxyExeOverride": "> Galaxy Client Override is not a valid path.",
      "fatalError__i": "> GOG Galaxy parser failed with fatal error:\n ${error}",
      "gogNotCompatible": "> GOG Galaxy parser is currently only available on Windows.",
      "gogNotInstalled": "> GOG Galaxy does not appear to be installed."
    }
  },
  "amazonGamesParser": {
    "exeOverrideTitle": "Amazon Games Path Override",
    "exeOverridePlaceholder": {
      "Windows_NT": "C:\\path\\to\\Amazon Games.exe",
      "Darwin": "/path/to/Amazon Games.app/Contents/MacOS/Amazon Games",
      "Linux": "/path/to/Amazon Games"
    },
    "launcherModeInputTitle": "Launch games via Amazon Games",
    "errors": {
      "invalidExeOverride": "> Amazon Games Installation Override is not a valid directory.",
      "osUnsupported": "> Amazon Games parser failed because Amazon Games is only avaliable on windows.",
      "databaseNotFound": "> Amazon Games database file not found. Amazon Games is most likely not installed.",
      "fatalError__i": "> Amazon Games parser failed with fatal error:\n ${error}"
    }
  },
  "itchIoParser": {
    "itchIoAppDataOverrideTitle": "itch.io AppData Directory Override",
    "itchIoAppDataOverridePlaceholder": {
      "Windows_NT": "C:\\AppData\\itch\\",
      "Darwin": "~/Library/Application Support/itch/",
      "Linux": "~/.config/itch/"
    },
    "itchIoWindowsOnLinuxInstallDriveRedirectTitle": "Windows-on-Linux Install Drive Redirect",
    "itchIoWindowsOnLinuxInstallDriveRedirectPlaceholder": "/mnt/d/",
    "errors": {
      "invalidItchIoAppDataOverride": "> itch.io AppData Override is not a valid directory.",
      "invalidItchIoWindowsOnLinuxInstallDriveRedirect": "> itch.io Windows-on-Linux Install Drive Redirect is not a valid directory.",
      "osUnsupported": "> itch.io parser failed because the parser only supports macos, linux, and windows currently.",
      "fatalError__i": "> itch.io parser failed with fatal error:\n ${error}",
      "databaseNotFound": "> itch.io database file not found. Itch is most likely not installed."
    }
  },
  "eaDesktopParser": {
    "eaGamesDirTitle": "EA Games Directory Override",
    "eaGamesDirPlaceholder": {
      "Windows_NT": "C:\\path\\to\\EA Games\\",
      "Darwin": "/path/to/EA Games/",
      "Linux": "/path/to/EA Games/"
    },
    "eaLauncherModeTitle": "Launch games via EA Desktop",
    "errors": {
      "fatalError__i": "> EA Desktop parser failed with fatal error:\n ${error}",
      "invalidXML__i": "> Invalid XML file ${dataFile}",
      "eaNotCompatible": "> EA Desktop Parser only supports Windows."
    }
  },
  "globParser": {
    "inputTitle": "Search glob",
    "inputPlaceholder": "${title}.@(iso|ISO)",
    "errors": {
      "noTitle__md": "> File glob must contain `${title}`!",
      "moreThanOneTitle__md": "> File glob must contain only one `${title}`!",
      "noStarNextToTitle__md": "> Star `*` can not be next to `${title}`!",
      "noAnyCharNextToTitle__md": "> Any char `?` can not be next to `${title}`!",
      "noGlobstarOnBothSides__md": "> Globstar `**` can only be on one side of `${title}`!",
      "noBracedDirSetOnBothSides__md": "> A braced set, containing at least one slash `/` can only be on one side of `${title}`!",
      "noBracedDirSetOrGlobstarOnBothSides__md": "> A braced set, containing at least one slash `/` and a globstar `**` can only be on one side of `${title}`!",
      "noEmptyPattern__md": "> Pattern can not be empty!",
      "noEmptyCharRange__md": "> Character range can not be empty!",
      "noStarInPatternNextToTitle__md": "> Star `*`, inside a pattern, can not be next to `${title}`!",
      "noAnyCharInPatternNextToTitle__md": "> Any char `?`, inside a pattern, can not be next to `${title}`!"
    }
  },
  "globRegexParser": {
    "inputTitle": "Search glob-regex",
    "inputPlaceholder": "${/valid regex/}",
    "errors": {
      "noRegex__md": "> File glob must contain `${regex}` where **regex** is your regular expression!",
      "moreThanOneRegex__md": "> File glob must contain only one `${regex}`!",
      "noStarNextToRegex__md": "> Star `*` can not be next to `${regex}`!",
      "noAnyCharNextToRegex__md": "> Any char `?` can not be next to `${regex}`!",
      "noGlobstarOnBothSides__md": "> Globstar `**` can only be on one side of `${regex}`!",
      "noBracedDirSetOnBothSides__md": "> A braced set, containing at least one slash `/` can only be on one side of `${regex}`!",
      "noBracedDirSetOrGlobstarOnBothSides__md": "> A braced set, containing at least one slash `/` and a globstar `**` can only be on one side of `${regex}`!",
      "noEmptyPattern__md": "> Pattern can not be empty!",
      "noEmptyCharRange__md": "> Character range can not be empty!",
      "noStarInPatternNextToRegex__md": "> Star `*`, inside a pattern, can not be next to `${regex}`!",
      "noAnyCharInPatternNextToRegex__md": "> Any char `?`, inside a pattern, can not be next to `${regex}`!"
    }
  },
  "sgdbProvider": {
    "nsfwInputTitle": "Allow NSFW artwork",
    "humorInputTitle": "Allow joke artwork",
    "imageMotionTypesTitle": "Allowed animation types",
    "stylesTitle": "Allowed grid styles",
    "stylesHeroTitle": "Allowed hero styles",
    "stylesLogoTitle": "Allowed logo styles",
    "stylesIconTitle": "Allowed icon styles",
    "sizesTitle": "Allowed banner dimensions",
    "sizesHeroTitle": "Allowed hero dimensions",
    "sizesTallTitle": "Allowed portrait dimensions",
    "sizesIconTitle": "Allowed icon dimensions"
  },
  "logger": {
    "component": {
      "noMessages": "No messages are available",
      "error": "Felmeddelanden",
      "info": "Info messages",
      "success": "Success messages",
      "fuzzy": "Fuzzy messages",
      "textWrap": "Wrap text",
      "autoscroll": "Autoscroll",
      "clearLog": "Rensa",
      "issueDescription": "Thorough issue description with passable spelling.",
      "handleExample": "CoolHandle#1234"
    }
  },
  "customVariables": {
    "service": {
      "error": {
        "failedToDownload__i": "Failed to download custom variables file. Status: ${error}.",
        "writingError": "Error occurred while saving custom variables.",
        "loadingError": "Error occurred while loading custom variables.",
        "corruptedVariables__i": "Saved custom variables are invalid!\r\nPermanent variable saving is disabled until this issue is resolved.\r\nTry to manually fix errors yourself (file - ${file})\r\nor seek help on github or our official discord channel: ${error}"
      },
      "info": {
        "downloaded": "Custom variables file has been updated."
      }
    }
  },
  "configPresets": {
    "service": {
      "error": {
        "failedToDownload__i": "Failed to download configuration presets file from commit ${commit}. Status: ${error}.",
        "writingError": "Error occurred while saving configuration presets.",
        "loadingError": "Error occurred while loading configuration presets.",
        "corruptedVariables__i": "Saved configuration presets are invalid!\r\nPermanent file saving is disabled until this issue is resolved.\r\nTry to manually fix errors yourself (file - ${file})\r\nor seek help on github or our official discord channel: ${error}"
      },
      "info": {
        "downloaded": "Community presets have been updated."
      }
    }
  },
  "settings": {
    "component": {
      "label": {
        "general": "Allmänt",
        "imageProviders": "Artwork Providers",
        "fuzzy": "Fuzzy Matcher",
        "environmentVariables": "Environment Variables",
        "communityPresets": "Community Presets and Custom Variables"
      },
      "text": {
        "autoUpdate": "Check for updates on start",
        "offlineMode": "Offline-läge",
        "removeApps_desc": "all added games and controllers",
        "removeApps_btn": "Ta bort",
        "preloadImages": "Artwork loading strategy",
        "fuzzy_verbose": "Log matching results",
        "fuzzy_filter": "Filter artwork",
        "enabledProviders": "Enabled image providers",
        "dnsServers": "DNS manual override",
        "selectLanguage": "Välj språk",
        "selectTheme": "Välj tema",
        "resetFuzzy_desc": "fuzzy list",
        "resetFuzzyCache_desc": "fuzzy cache",
        "resetFuzzy_btn": "Återställ",
        "customVariables_desc": "anpassade variabler",
        "configPresets_desc": "config presets",
        "showSteamImages": "Show current Steam artwork by default",
        "deleteDisabledShortcuts": "Remove shortcuts for disabled parsers",
        "clearLogOnTest": "Automatically clear log before testing parsers",
        "configDir": "Config Directory",
        "steamDir": "Steam Directory"
      },
      "placeholder": {
        "noProviders": "Ingen",
        "userAccounts": "For example ${steamlogin}",
        "bySystem": {
          "Windows_NT": {
            "steamDirectory": "Typically C:\\Program Files (x86)\\Steam\\",
            "romsDirectory": "For example D:\\ROMs\\",
            "retroarchPath": "For example C:\\Path\\To\\Retroarch.exe",
            "raCoresDirectory": "Typically C:\\Users\\UserName\\AppData\\Roaming\\RetroArch\\cores\\",
            "localImagesDirectory": "For example C:\\Path\\To\\LocalArtwork\\"
          },
          "Darwin": {
            "steamDirectory": "Typically ~/Library/Application Support/Steam/",
            "romsDirectory": "For example ~/ROMs/",
            "retroarchPath": "For example /path/to/retroarch",
            "raCoresDirectory": "Typically /Applications/Retroarch.app/Contents/Resources/cores/",
            "localImagesDirectory": "For example ~/path/to/localartwork/"
          },
          "Linux": {
            "steamDirectory": "Typically /home/user/.steam/steam/",
            "romsDirectory": "For example ~/ROMs/",
            "retroarchPath": "For example /path/to/retroarch",
            "raCoresDirectory": "Typically /lib/x86_64-linux-gnu/libretro/cores/",
            "localImagesDirectory": "For example ~/path/to/localartwork/"
          }
        }
      }
    },
    "service": {
      "info": {
        "updatingSettings": "Updating user settings with new fields."
      },
      "error": {
        "writingError": "Error occurred while saving user settings.",
        "readingError": "Error occurred while reading user settings.",
        "corruptedSettings__i": "Saved app settings are invalid!\r\nPermanent settings saving is disabled until this issue is resolved.\r\nTry to manually fix errors yourself (file - ${file})\r\nor seek help on github or our official discord channel: ${error}"
      }
    }
  },
  "nav": {
    "component": {
      "about": "Om",
      "preview": "Preview",
      "view": "Visa spel",
      "logger": "Logg",
      "settings": "Inställningar",
      "parsers": "Create Parser",
      "customVariables": "Variabler",
      "userExceptions": "Undantag",
      "noTitle": "Ingen titel!"
    }
  },
  "userExceptions": {
    "component": {
      "buttons": {
        "save": "Spara",
        "deleteAll": "Rensa",
        "undoChanges": "Ångra ändringar",
        "addItem": "Lägg till undantag",
        "deleteItem": "Remove exception"
      },
      "text": {
        "title": "User Exceptions",
        "exclude": "Exkludera titel",
        "excludeArtwork": "Local Artwork Only"
      },
      "placeholder": {
        "sortBy": "Sort By"
      }
    },
    "service": {
      "error": {
        "loadingError": "Could not load user exceptions",
        "corruptedExceptions__i": "User exceptions corrupt (file - ${file}). Saving is disabled, full error is: ${error}",
        "writingError": "Error occurred saving user exceptions"
      }
    }
  },
  "parsers": {
    "component": {
      "buttons": {
        "save": "Spara",
        "copy": "Klona",
        "testParser": "Test",
        "delete": "Radera",
        "moveUp": "Flytta upp",
        "moveDown": "Flytta ner",
        "faq": "FAQ",
        "undoChanges": "Ångra ändringar",
        "undoDelete": "Ångra borttagning",
        "toClipboard": "Copy configuration to clipboard"
      },
      "info": {
        "testStarting__i": "Testing \"${title}\" parser (SRM version - ${version} ${portable}).",
        "opSys__i": "Operating system is \"${os}\"",
        "testCompleted": "Parser test is completed.",
        "nothingWasFound": "Parser found nothing.",
        "copiedToClipboard": "Parser copied to clipboard",
        "userExclusions": "User excluded:",
        "excludedFileInfo__i": "[${index}/${total}]: ${filename}\n Excluded by \"${exceptionKey}\"",
        "removingControllers__i": "Removing controller templates for parser: ${configTitle}",
        "fetchingControllerTemplates": "Fetching controller templates"
      },
      "error": {
        "missingAccounts__i": "Following ${count} user account(s) were not found (user must to login to Steam at least once):",
        "missingAccountInfo__i": "  ${name}",
        "noAccountsWarning": "Warning! No user accounts found, it could be due to one of the reasons below:\r\n - incorrect Steam directory;\r\n - no user has ever logged in;\r\n - Steam does not save user credentials.\r\nIf you're seeing this, Add Games will skip this configuration.",
        "cannotParseUserIDs": "Error parsing user accounts:",
        "failedToMatch": "Failed to match:",
        "failedFileInfo__i": "[${index}/${total}]: ${filename}",
        "testFailed": "Testing failed",
        "cannotTestInvalid": "Can not test invalid configuration!",
        "cannotCopyInvalid": "Can not copy invalid configuration!",
        "failedToCopy": "Failed to copy to clipboard!",
        "cannotFetchTemplates": "Can not fetch controller templates for invalid steam directory!",
        "errorRemovingControllers": "Error removing controllers:",
        "cannotRemoveControllers": "Can not remove controllers from invalid steam directory!"
      },
      "success": {
        "foundAccounts__i": "Found ${count} available user account(s):",
        "foundAccountInfo__i": "  ${name} (steamID64: ${steamID64}, accountID: ${accountID})",
        "steamCategories__i": "[${index}/${total}]:     Steam categories - ${steamCategories}",
        "steamCategoriesInfo__i": "[${index}/${total}]:                        ${steamCategories}",
        "exceptionKey__i": "[${index}/${total}]:         Exception ID - ${appid}",
        "appId__i": "[${index}/${total}]:        Legacy App ID - ${appid}",
        "shortAppId__i": "[${index}/${total}]:               App ID - ${appid}",
        "extractedTitle__i": "[${index}/${total}]:      Extracted title - ${title}",
        "fuzzyTitle__i": "[${index}/${total}]:          Fuzzy title - ${title}",
        "finalTitle__i": "[${index}/${total}]:          Final title - ${title}",
        "filePath__i": "[${index}/${total}]:            File path - ${filePath}",
        "startDir__i": "[${index}/${total}]:            Start dir - ${startDir}",
        "completeShortcut__i": "[${index}/${total}]:    Complete shortcut - ${shortcut}",
        "firstImageQuery__i": "[${index}/${total}]:      Artwork queries - ${query}",
        "imagePool__i": "[${index}/${total}]:         Artwork pool - ${imagePool}",
        "imageQueries__i": "[${index}/${total}]:                        ${query}",
        "defaultImage__i": "[${index}/${total}]: Resolved fallback ${artworkType}:\r\n[${index}/${total}]:                        ${image}",
        "resolvedDefaultImage__i": "[${index}/${total}]: Fallback ${artworkType}:",
        "localImages__i": "[${index}/${total}]: Resolved local ${artworkType}:",
        "resolvedLocalImages__i": "[${index}/${total}]: Local ${artworkType} glob:",
        "indexInfo__i": "[${index}/${total}]:                        ${indexed}",
        "removedControllers__i": "Succesfully removed controllers for parser: ${configTitle}",
        "fetchedTemplates": "Fetched all controller templates"
      },
      "label": {
        "parserType": "Parser type",
        "configTitle": "Parser title",
        "steamCategories": "Steam collections",
        "executableModifier": "Executable modifier",
        "executableLocation": "Executable",
        "romDirectory": "ROMs directory",
        "steamDirectory": "Steam directory",
        "startInDirectory": "\"Start In\" directory",
        "userAccounts": "Användarkonton",
        "titleFromVariable": "Title from custom variable",
        "titleModifier": "Title modifier",
        "fuzzyMatch": "Fuzzy matching",
        "executableArgs": "Command line arguments",
        "onlineImageQueries": "Artwork provider search queries",
        "imagePool": "Artwork pool",
        "imageProviders": "Artwork providers",
        "defaultImage__i": "Fallback ${artworkType}",
        "localImages__i": "Local ${artworkType} glob"
      },
      "placeholder": {
        "parserType": "Select parser...",
        "configTitle": "My Awesome Parser",
        "steamDirectory": {
          "Windows_NT": "${steamdirglobal} or C:\\path\\to\\Steam\\",
          "Darwin": "${steamdirglobal} eller /path/to/Steam/",
          "Linux": "${steamdirglobal} eller /path/to/Steam/"
        },
        "titleFromVariable": "${variableGroup1}${variableGroup2}",
        "titleModifier": "${fuzzyTitle} or ${title}",
        "defaultImage__i": {
          "Windows_NT": "C:\\\\path\\\\to\\\\fallback_${artworkType}.png",
          "Darwin": "/path/to/fallback_${artworkType}.png",
          "Linux": "/path/to/fallback_${artworkType}"
        },
        "localImages__i": {
          "Windows_NT": "C:\\\\path\\\\to\\\\art\\\\${artworkType}\\\\\\${title}.@(png|jpg)",
          "Darwin": "/path/to/art/${artworkType}/\\${title}.@(png|jpg)",
          "Linux": "/path/to/art/${artworkType}/\\${title}.@(png|jpg)"
        },
        "onlineImageQueries": "${${fuzzyTitle}} or ${${title}}${${fuzzyTitle}}",
        "imagePool": "${fuzzyTitle}",
        "romDirectory": {
          "Windows_NT": "C:\\path\\to\\games\\",
          "Darwin": "/path/to/games/",
          "Linux": "/path/to/games/"
        },
        "glob": "${title}.@(iso|ISO)",
        "executableLocation": {
          "Windows_NT": "C:\\path\\to\\emulator.exe",
          "Darwin": "/path/to/emulator.app",
          "Linux": "/path/to/emulator"
        },
        "executableArgs": "--arg1 --arg2 --launch \"${filePath}\"",
        "executableModifier": "\"${exePath}\"",
        "startInDirectory": {
          "Windows_NT": "C:\\path\\to\\start-in-dir\\",
          "Darwin": "/path/to/start-in-dir/",
          "Linux": "/path/to/start-in-dir/"
        },
        "imageProviders": "Ingen",
        "multiAPIPlaceholder": "Inget filter"
      },
      "text": {
        "skipFileIfVariableWasNotFound": "Skip file if variable was not found",
        "caseInsensitiveVariables": "Case-insensitive variables",
        "shortcut_passthrough": "Follow .lnk or .desktop to destination (Windows and Linux only)",
        "fuzzy_use": "Use fuzzy matching",
        "fuzzy_removeCharacters": "Aggressive matching",
        "fuzzy_removeBrackets": "Remove (...) and [...] brackets",
        "fuzzy_replaceDiacritic": "Replace diacritic characters",
        "appendArgsToExecutable": "Append arguments to executable",
        "disabled": "Disable current parser",
        "advanced": "Show advanced options",
        "noTitle": "Ingen titel!"
      }
    },
    "service": {
      "info": {
        "updatingConfigurations": "Updating user's parsers with new fields"
      },
      "error": {
        "savingConfiguration": "Error encountered while saving user's parsers!",
        "readingConfiguration": "Error encountered while loading user's parsers!",
        "parserTypeMissing": "Cannot save without specifying parser type",
        "corruptedConfiguration__i": "One or more saved parsers are invalid!\r\nPermanent configuration saving is disabled until this issue is resolved.\r\nTry to manually fix errors yourself (file - ${file})\r\nor seek help on github or our official discord channel: ${error}",
        "fetchingTemplates": "Error encountered while fetching controllers templates!"
      },
      "validationErrors": {
        "parserType__md": "> Incorrect parser type!",
        "configTitle__md": "> Parser title field cannot be blank!",
        "parserId__md": "> Parser Id is missing, something is horribly wrong.",
        "parserInput": {
          "noInput": "No inputs are available!",
          "inputNotAvailable__i": "\"${name}\" input is not available!",
          "incorrectParser": "Incorrect parser!"
        },
        "romDir__md": "> ROMs directory is invalid!",
        "userAccounts__md": "> User accounts field is required!",
        "steamDir__md": "> Steam directory is invalid!",
        "startInDir__md": "> \"Start In\" directory is invalid!",
        "executable__md": "> Executable is invalid!",
        "defaultImage__md": "> Fallback artwork is an invalid path!",
        "variableString__md": "> Uneven number of `${` and `}` pairs! Use `\\` to escape `${` or `}` if you want to use them as characters.",
        "unhandledValidationKey__md": "> Input's validation is unhandled!",
        "genericDir__md": "> Directory is invalid!",
        "genericPath__md": "> Path is invalid!"
      },
      "text": {
        "noTitle": "Ingen titel!"
      }
    }
  },
  "fuzzyMatcher": {
    "info": {
      "downloading": "Title list for fuzzy matching will be downloaded.",
      "successfulDownload": "Download was successful. Saving list.",
      "checkingIfListIsUpToDate": "Checking if title list is up to date.",
      "listIsOutdated": "List is outdated. Title list for fuzzy matching will be downloaded.",
      "listIsUpToDate": "Title list is up to date.",
      "match__i": "Fuzzy title \"${fuzzyTitle}\" from \"${extractedTitle}\"",
      "equal__i": "Fuzzy compare: \"${a}\" == \"${b}\"",
      "notEqual__i": "Fuzzy compare: \"${a}\" != \"${b}\""
    },
    "error": {
      "fatalError": "Fatal error occurred while loading list for Fuzzy matcher. Fuzzy matching will be skipped.",
      "totalGamesIsUndefined": "Failed to get fuzzy list count. \"totalGames\" key is undefined."
    }
  },
  "fileParser": {
    "error": {
      "parserNotFound__i": "Parser \"${name}\" not found!",
      "tooManyFieldGlobs__md": "> Only one `$(...)$` set is allowed per input.",
      "parserIsRequired__md": "> First part of `$(...)$` must contain a valid **Glob** in **Glob-regex** field.",
      "noWinSlashes__md": "> Windows directory character `\\` is not allowed! Use `/` instead."
    }
  },
  "imageProvider": {
    "error": {
      "webWorkerError__i": "Web worker error has occurred. ${error}",
      "unknownWebWorkerError": "Unknown web worker error has occurred. Error data: ${data}"
    }
  },
  "vdfManager": {
    "error": {
      "noUsersFound": "None of the provided steam directories contained any user directory.",
      "emptyDirectoryList": "Directory list is empty.",
      "couldNotPrepareToRead__i": "Could not find required steam files:\n ${error}",
      "couldNotBackupEntries__i": "Could not backup required steam files:\n ${error}",
      "couldNotReadEntries__i": "Could not read required steam files:\n ${error}",
      "couldNotWriteEntries": "Could not write entries to steam files:",
      "couldNotMergeEntries__i": "Could not merge entries:\n ${error}",
      "couldNotRemoveEntries__i": "Could not remove entries:\n ${error}",
      "nonFatal": "Non fatal errors occurred while writing:"
    }
  },
  "vdfFile": {
    "error": {
      "readingVdf__i": "Failed to read from \"${filePath}\".\n ${error}",
      "writingVdf__i": "Failed to write to \"${filePath}\".\n ${error}",
      "skippingDMCA__i": "Skipping DMCA'd artwork for ${title}",
      "corruptedVdf__i": "\"${filePath}\" is corrupted.\n ${error}",
      "creatingBackup__i": "Could not create backup for \"${filePath}\".\n ${error}",
      "unsupportedMimeType__i": "Mime type (${type}) is unsupported (title - \"${title}\").",
      "imageError__i": "Error occurred while saving/downloading artwork for \"${title}\". Url: ${url}.\n ${error}"
    }
  },
  "helpers": {
    "error": {
      "noUserIdsInDir__i": "\"${steamDirectory}\" contains no user ids."
    }
  }
}
